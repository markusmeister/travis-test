[
["index.html", "A Book to Test Travis CI Chapter 1 Prerequisites", " A Book to Test Travis CI Markus Meister 2020-03-04 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) install.packages(&quot;rprojroot&quot;) update.packages(&quot;knitr&quot;) update.packages(&quot;rmarkdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. projdir = rprojroot::find_rstudio_root_file() # project directory include_svg = function(path) { # used to convert svg to pdf if (knitr::is_latex_output()) { output = xfun::with_ext(path, &#39;pdf&#39;) # you can compare the timestamp of pdf against svg to avoid conversion if necessary system2(&#39;rsvg-convert&#39;, c(&#39;-f&#39;, &#39;pdf&#39;, &#39;-a&#39;, &#39;-o&#39;, shQuote(c(output, path)))) } else { output = path } knitr::include_graphics(output) } library(reticulate) matplotlib &lt;- import(&quot;matplotlib&quot;) matplotlib$use(&quot;Agg&quot;, force = TRUE) import numpy as np import os import sys import matplotlib matplotlib.rcParams[&#39;text.usetex&#39;] = True # use Latex to draw all text matplotlib.rcParams[&#39;text.latex.preamble&#39;] = [r&#39;\\usepackage{amsmath}&#39;] import matplotlib.pyplot as plt curdir = os.getcwd() os.chdir(r.projdir) from mib.utils import plot, save_img # plotting routines os.chdir(curdir) "],
["equations.html", "Chapter 2 Equations 2.1 Inline equations 2.2 Display equations 2.3 Equation labels 2.4 Equation numbering 2.5 Multi-line equation with multiple labels", " Chapter 2 Equations 2.1 Inline equations …are enclosed by simple $ $, like this: $\\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39;\\,$ which produces this output: \\(\\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39;\\,\\). 2.2 Display equations …without numbers can be enclosed by double $$ $$, like this: $$\\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39;\\,.$$ which produces \\[\\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39;\\,.\\] 2.3 Equation labels To label an equation with name use the format (\\#eq:name). To cite that equation use the format \\@ref(eq:name) The equation label has to appear after the body of the equation code, like this: \\begin{equation} \\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39; (\\#eq:binom) \\end{equation} \\[\\begin{equation} \\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39; \\tag{2.1} \\end{equation}\\] \\begin{equation} f\\left(k\\right)=\\binom{n}{k}p^k\\left(1-p\\right)^{n-k} (\\#eq:binom2) \\end{equation} \\[\\begin{equation} f\\left(k\\right)=\\binom{n}{k}p^k\\left(1-p\\right)^{n-k} \\tag{2.2} \\end{equation}\\] Then you can cite the equation, like this: (2.1). Changed this 5:11PM. 2.4 Equation numbering There is some weirdness about how equation numbering is handled in the PDF versus the HTML versions of the book. In the PDF output equations are numbered by default. Every line of an equation will get numbered except if it is inside $$ $$. has \\notag at the end of line, before the \\\\. is in an {equation*} or {align*} environment where there are no labels is in a {split} environment with a single label But in the HTML output an equation is unnumbered by default, except if it contains an explicit equation label. For more details see here. So, to make sure we get the same numbering in PDF and HTML we should do this: An unnumbered display equation should be enclosed with $$ $$ or in environments {equation*} or {align*}. A numbered display equation should include a single label. Here are some examples: This equation will get a number in PDF but not in HTML, which is a mistake! \\[\\begin{equation} \\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39; \\end{equation}\\] This gets no number in PDF or HTML: \\[\\begin{equation*} \\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39; \\end{equation*}\\] And this gets a number in both PDF and HTML: \\[\\begin{equation} \\tilde h(\\omega) = \\int_{-\\infty}^{\\infty}\\,e^{i\\omega t&#39;} h(t&#39;) \\, dt&#39; \\tag{2.3} \\end{equation}\\] 2.5 Multi-line equation with multiple labels Here is a long equation stretching over several lines, first with a single number \\[\\begin{equation} \\begin{split} \\mathrm{Var}(\\hat{\\beta}) &amp; =\\mathrm{Var}((X&#39;X)^{-1}X&#39;y)\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)((X&#39;X)^{-1}X&#39;)&#39;\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)X(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\sigma^{2}IX(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}\\sigma^{2} \\end{split} \\tag{2.4} \\end{equation}\\] …then with multiple numbers \\[\\begin{align} \\mathrm{Var}(\\hat{\\beta}) &amp; =\\mathrm{Var}((X&#39;X)^{-1}X&#39;y) \\notag \\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)((X&#39;X)^{-1}X&#39;)&#39;\\tag{2.5}\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)X(X&#39;X)^{-1}\\tag{2.6}\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\sigma^{2}IX(X&#39;X)^{-1}\\tag{2.7}\\\\ &amp; =(X&#39;X)^{-1}\\sigma^{2} \\tag{2.8} \\end{align}\\] I wrote some grep routines that produce automatic equation labels, for example in the study guide which contains several hundred equations. Every one of those has a label, even though we rarely cite those labels. "],
["python.html", "Chapter 3 Python 3.1 A normal R code chunk 3.2 Modify an R variable 3.3 A Python chunk 3.4 Modify a Python variable 3.5 Figures from R chunks 3.6 Python graphics", " Chapter 3 Python 3.1 A normal R code chunk x = 42 print(x) ## [1] 42 3.2 Modify an R variable In the following chunk, the value of x on the right hand side is 42, which was defined in the previous chunk. x = x + 12 print(x) ## [1] 54 3.3 A Python chunk This works fine and as expected. print(&#39;Python version = &#39;, sys.version) ## Python version = 3.5.2 (default, Nov 12 2018, 13:43:14) ## [GCC 5.4.0 20160609] x = 42 * 2 print(x) ## 84 The value of x in the Python session is 84. It is not the same x as the one in R. 3.4 Modify a Python variable x = x + 18 print(x) ## 102 Retrieve the value of x from the Python session again: py$x ## [1] 102 Assign to a variable in the Python session from R: py$y = 1:5 See the value of y in the Python session: print(y) ## [1, 2, 3, 4, 5] 3.5 Figures from R chunks Figure 3.1: This is a figure from an image file Can cite this as Fig 3.1. 3.6 Python graphics You can draw plots using the matplotlib package in Python: plt.plot([0, 2, 1, 4]) plt.show() "]
]
